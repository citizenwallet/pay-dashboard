generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model a_profiles {
  created_at                                        DateTime         @default(now()) @db.Timestamptz(6)
  account                                           String           @id(map: "Profiles_pkey")
  username                                          String
  name                                              String           @default("")
  description                                       String           @default("")
  image                                             String           @default("")
  image_medium                                      String           @default("")
  image_small                                       String           @default("")
  token_id                                          String           @default("")
  updated_at                                        DateTime         @default(now()) @db.Timestamp(6)
  place_id                                          Int?
  a_interactions_a_interactions_accountToa_profiles a_interactions[] @relation("a_interactions_accountToa_profiles")
  a_interactions_a_interactions_withToa_profiles    a_interactions[] @relation("a_interactions_withToa_profiles")
  places                                            places?          @relation(fields: [place_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  a_transactions_a_transactions_fromToa_profiles    a_transactions[] @relation("a_transactions_fromToa_profiles")
  a_transactions_a_transactions_toToa_profiles      a_transactions[] @relation("a_transactions_toToa_profiles")
  orders                                            orders[]
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model a_transactions {
  id                                         String           @id(map: "Transactions_pkey")
  hash                                       String
  created_at                                 DateTime         @default(now()) @db.Timestamptz(6)
  updated_at                                 DateTime         @default(now()) @db.Timestamptz(6)
  from                                       String?
  to                                         String?
  value                                      String           @default("0")
  description                                String           @default("")
  status                                     String           @default("pending")
  a_interactions                             a_interactions[]
  a_profiles_a_transactions_fromToa_profiles a_profiles?      @relation("a_transactions_fromToa_profiles", fields: [from], references: [account], onDelete: NoAction, onUpdate: NoAction, map: "Transactions_from_fkey")
  a_profiles_a_transactions_toToa_profiles   a_profiles?      @relation("a_transactions_toToa_profiles", fields: [to], references: [account], onDelete: NoAction, onUpdate: NoAction, map: "Transactions_to_fkey")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model businesses {
  id              Int              @id(map: "Businesses_pkey") @default(autoincrement())
  created_at      DateTime         @default(now()) @db.Timestamptz(6)
  name            String?
  status          String?
  vat_number      String?
  uuid            String?          @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  business_status business_status? @default(created)
  account         String?
  invite_code     String?          @unique
  email           String?
  phone           String?
  iban_number     String?
  website         String?
  address_legal   String?
  legal_name      String?
  invitations     invitations[]
  places          places[]
  users           users[]
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model old_Accounts {
  address          String  @id(map: "Accounts_pkey")
  account_name     String?
  status           String?
  TransactionsFrom String?
  TransactionsTo   String?
  wallet_type      String?
  linked_user_id   Int?
  users            users?  @relation(fields: [linked_user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "Accounts_linked_user_id_fkey")
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model old_ledger {
  TransactionHash    String
  DateTime           DateTime? @db.Timestamp(6)
  From               String?
  To                 String?
  Amount             Float?
  Status             String?
  Description        String?
  blockexplorer_URL  String?   @map("blockexplorer URL")
  Method             String?
  Blocknumber        Int?
  UnixTimestamp      Int?
  Error              String?
  To_account_name    String?   @map("To account name")
  From_account_name  String?   @map("From account name")
  Amount_with_symbol String?   @map("Amount with symbol")
  ChainID            String?
  Source             String?
  From___file_import String?   @map("From - file import")
  To___file_import   String?   @map("To - file import")

  @@ignore
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model orders {
  id           Int         @id @default(autoincrement())
  created_at   DateTime    @default(now()) @db.Timestamptz(6)
  total        Int?
  due          Int?
  items        Json?
  status       String?
  place_id     Int?
  completed_at String?
  description  String?
  tx_hash      String?
  type         String?
  account      String?
  a_profiles   a_profiles? @relation(fields: [account], references: [account])
  places       places?     @relation(fields: [place_id], references: [id], onDelete: Cascade)
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model places {
  id          Int          @id(map: "establishments_pkey") @default(autoincrement())
  created_at  DateTime     @default(now()) @db.Timestamptz(6)
  name        String?
  business_id Int?
  slug        String?      @unique
  accounts    Json?        @default("[]")
  invite_code String?
  terminal_id Int?
  image       String?
  description String?
  display     display_type @default(amount)
  a_profiles  a_profiles[]
  orders      orders[]
  businesses  businesses?  @relation(fields: [business_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  pos_items   pos_items[]
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model pos_items {
  id          Int      @id @unique @default(autoincrement())
  created_at  DateTime @default(now()) @db.Timestamptz(6)
  place_id    Int?
  image       String?
  price       Int?
  name        String?
  category    String?
  vat         Int?
  emoji       String?
  description String?
  order       Float    @default(0)
  places      places?  @relation(fields: [place_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model t_events_100 {
  contract        String
  event_signature String
  name            String
  created_at      DateTime @default(now()) @db.Timestamp(6)
  updated_at      DateTime @default(now()) @db.Timestamp(6)

  @@unique([contract, event_signature])
  @@index([contract], map: "idx_events_100_contract")
  @@index([contract, event_signature], map: "idx_events_100_contract_signature")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
/// This model contains an expression index which requires additional setup for migrations. Visit https://pris.ly/d/expression-indexes for more info.
model t_logs_100 {
  hash       String   @id
  tx_hash    String
  created_at DateTime @default(now()) @db.Timestamp(6)
  updated_at DateTime @default(now()) @db.Timestamp(6)
  nonce      Int
  sender     String
  dest       String
  value      String
  data       Json?
  status     String   @default("success")

  @@index([dest], map: "idx_logs_100_dest")
  @@index([dest, created_at], map: "idx_logs_100_dest_date")
  @@index([tx_hash], map: "idx_logs_100_tx_hash")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model t_logs_data_100 {
  hash       String   @id
  data       Json?
  created_at DateTime @default(now()) @db.Timestamp(6)
  updated_at DateTime @default(now()) @db.Timestamp(6)

  @@index([hash], map: "idx_logs_data_100_hash")
}

model t_push_token_100_0x56cc38bda01be6ec6d854513c995f6621ee71229 {
  token      String
  account    String
  created_at DateTime @default(now()) @db.Timestamp(6)
  updated_at DateTime @default(now()) @db.Timestamp(6)

  @@unique([token, account], map: "t_push_token_100_0x56cc38bda01be6ec6d854513c9_token_account_key")
  @@index([account], map: "idx_push_100_0x__e71229_account")
  @@index([token, account], map: "idx_push_100_0x__e71229_token_account")
}

model t_push_token_100_0x5815e61ef72c9e6107b5c5a05fd121f334f7a7f1 {
  token      String
  account    String
  created_at DateTime @default(now()) @db.Timestamp(6)
  updated_at DateTime @default(now()) @db.Timestamp(6)

  @@unique([token, account], map: "t_push_token_100_0x5815e61ef72c9e6107b5c5a05f_token_account_key")
  @@index([account], map: "idx_push_100_0x__f7a7f1_account")
  @@index([token, account], map: "idx_push_100_0x__f7a7f1_token_account")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model t_sponsors_100 {
  contract   String   @id
  pk         String
  created_at DateTime @default(now()) @db.Timestamp(6)
  updated_at DateTime @default(now()) @db.Timestamp(6)
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model users {
  id                 Int            @id(map: "Users_pkey") @default(autoincrement())
  created_at         DateTime       @default(now()) @db.Timestamptz(6)
  email              String?        @unique
  name               String?
  avatar             String?
  magic_link         String?
  usergroup          String?
  linked_business_id Int?
  uuid               String?        @unique @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  phone              String?
  description        String?
  invitation_token   String?
  password           String?
  account            String?
  user_id            String?        @unique @db.Uuid
  old_Accounts       old_Accounts[]
  businesses         businesses?    @relation(fields: [linked_business_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "Users_linked_business_id_fkey")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model a_interactions {
  id                                            String          @id(map: "interactions_pkey") @unique(map: "interactions_id_key") @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  transaction_id                                String?
  account                                       String?
  created_at                                    DateTime?       @default(now()) @db.Timestamptz(6)
  updated_at                                    DateTime?       @db.Timestamptz(6)
  with                                          String?
  new_interaction                               Boolean?        @default(false)
  a_profiles_a_interactions_accountToa_profiles a_profiles?     @relation("a_interactions_accountToa_profiles", fields: [account], references: [account], onUpdate: NoAction, map: "interactions_account_fkey")
  a_transactions                                a_transactions? @relation(fields: [transaction_id], references: [id], onUpdate: NoAction, map: "interactions_transaction_id_fkey")
  a_profiles_a_interactions_withToa_profiles    a_profiles?     @relation("a_interactions_withToa_profiles", fields: [with], references: [account], onUpdate: NoAction, map: "interactions_with_fkey")

  @@unique([account, with], map: "unique_account_with")
}

model invitations {
  id          Int         @id @default(autoincrement())
  business_id Int?
  email       String      @db.VarChar(255)
  token       String      @unique @db.Uuid
  status      String?     @default("pending") @db.VarChar(50)
  created_at  DateTime?   @default(now()) @db.Timestamp(6)
  used_at     DateTime?   @db.Timestamp(6)
  expires_at  DateTime?   @db.Timestamp(6)
  businesses  businesses? @relation(fields: [business_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

enum business_status {
  verified
  created
}

enum user_status {
  signed_up            @map("signed up")
  onboarding_completed @map("onboarding completed")
}

enum wallet_type {
  kiosk
  app
  pos_app @map("pos app")
}

/// This enum is commented in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
enum display_type {
  amount
  menu
  amountAndMenu
}
